generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @map("follower_id")
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @map("following_id")

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  followers     Follows[] @relation("following")
  following     Follows[] @relation("follower")
  accounts      Account[]
  sessions      Session[]
  list          List[]

  @@map("users")
}

enum ListType {
  COMPLETED
  PLAYING
  ONHOLD
  WISHTOPLAY
  DROPPED
}

model List {
  gameId      Int      @unique
  isFavorited Boolean  @map("is_favorited")
  listType    ListType @map("list_type")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")

  @@index([userId])
  @@map("lists")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model IGDBToken {
  accessToken String   @id @unique @map("access_token")
  expiredAt   DateTime @map("expires_at")

  @@map("igdb_token")
}
